---
name: "Deploy"

on:
  workflow_call:
    inputs:
      stage:
        description: stage of the deployment
        default: staging
        required: true
        type: string
      domain:
        description: domain used for bucket and preview values
        default: metal-fests.com
        required: true
        type: string
    secrets:
      DEPLOY_ROLE_ARN:
        description: ARN of the role to assume for deployment
        required: true
      CLOUDFRONT_DISTRIBUTION_ID:
        description: CloudFront distribution ID to invalidate cache
        required: true
      TOKEN:
        description: Token to use for deployment status updates and PR comments
        required: true

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    steps:
      - name: (Event) Start Deploy
        uses: bobheadxi/deployments@v1.5.0
        id: deployment
        with:
          step: start
          token: ${{ secrets.TOKEN }}
          env: ${{ inputs.stage }}

      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup node
        uses: ./.github/actions/node-setup

      - name: Set up Go
        uses: ./.github/actions/go-setup

      - name: (Setup) AWS Credentials
        uses: aws-actions/configure-aws-credentials@v5.1.0
        with:
          role-to-assume: ${{ secrets.DEPLOY_ROLE_ARN }}
          role-session-name: deploy-static-app
          aws-region: eu-west-1

      - name: (Deploy) Build Application
        run: |
          make build-project

      - name: (Deploy) Push Contents to S3
        run: |
          aws s3 rm "s3://${AWS_S3_BUCKET}/" --recursive
          aws s3 cp ./build/ "s3://${AWS_S3_BUCKET}/" --recursive
        env:
          AWS_S3_BUCKET: ${{ inputs.domain }}

      - name: (Deploy) Invalidate CloudFront Cache
        if: ${{ github.ref == 'refs/heads/main' }}
        run: |
          INVALIDATION_ID=$(aws cloudfront create-invalidation \
            --distribution-id "${CLOUDFRONT_DISTRIBUTION_ID}" \
            --paths "/*" \
            --query 'Invalidation.Id' \
            --output text)

          INVALIDATION_STATUS=$(aws cloudfront get-invalidation \
            --distribution-id "${CLOUDFRONT_DISTRIBUTION_ID}" \
            --id $INVALIDATION_ID \
            --query 'Invalidation.Status' \
            --output text)

          while [ "$INVALIDATION_STATUS" != "Completed" ]; do
            sleep 30
            INVALIDATION_STATUS=$(aws cloudfront get-invalidation \
              --distribution-id "${CLOUDFRONT_DISTRIBUTION_ID}" \
              --id $INVALIDATION_ID \
              --query 'Invalidation.Status' \
              --output text)
          done
        env:
          CLOUDFRONT_DISTRIBUTION_ID: ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}

      - name: (Event) Update Deploy Status
        uses: bobheadxi/deployments@v1.5.0
        if: always()
        with:
          step: finish
          token: ${{ secrets.TOKEN }}
          status: ${{ job.status }}
          env: ${{ inputs.stage }}
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}
